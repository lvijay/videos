jshell -R-ea -q
㉚
⊂
interface MList {
    int size();
    String get(int i);
}
interface ThenReturn {
    void thenReturn(Object value);
}
class ToyMockito {
    public static class MLst implements MList {
        int sizeval;
        Map<Integer, String> getval = new HashMap<>();
        @Override
        public int size() {
            THENRETURN = v -> sizeval = (int) v;
            return sizeval;
        }
        @Override
        public String get(int i) {
            THENRETURN = v -> getval.put(i, (String) v);
            return getval.get(i); // return the old value
        }
    }
    public static MList mock() { return new MLst(); }
    public static ThenReturn when(Object o) { return THENRETURN; }
    static ThenReturn THENRETURN = null;
}
⊃
0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38
«c:l»㉚©
/* Let's look at the ToyMockito class in more detail */
⊂class ToyMockito {
    public static ThenReturn THENRETURN = null;
    public static class MLst implements MList {
        public int sizeval;
        public Map<Integer, String> getval = new HashMap<>();
        public int size() {
            THENRETURN = v -> sizeval = (int) v;
            return sizeval;
        }
        public String get(int i) {
            THENRETURN = v -> getval.put(i, (String) v);
            return getval.get(i);
        }
    }
    public static ThenReturn when(Object o) { return THENRETURN; }
    public static MList mock() { return new MLst(); }
}⊃㉚
var mocklist = ToyMockito.mock();
㉚ToyMockito.when(mocklist.size⊂()⊃㉚)㉚.thenReturn(123);
㉚«c:u»①((ToyMockito.MLst) mocklist).sizeval
㉚/* And that's all, really.  We have reverse engineered an amazing
 * framework by being puzzled by its seemingly obvious behavior.
 * I do not know Mockito's authors' names but they have done an
 * amazing job designing it.  By simulating pass-by-reference in
 * a pass-by-value language, they have created a magical library.
 *
 * Obligatory comments
 * ⊂-------------------⊃
 *
 * If you enjoyed this video, click the subscribe button and
 * enable notifications.  I try to release videos weekly.  Share
 * your thoughts by leaving comments.
 *
 * And if you learnt something new, chances are your friends
 * will too.  Do share. */
㉚/exit
㉚㉚㉚㉚
